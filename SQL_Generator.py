import streamlit as st
import openai


from openai import AsyncOpenAI
from openai import OpenAI

client = AsyncOpenAI(
    # This is the default and can be omitted
    api_key=st.secrets["API_key"],
)

async def generate_response(question, context):
  model = "gpt-4-0125-preview"
  #model - "gpt-3.5-turbo"

  completion = await client.chat.completions.create(model=model, messages=[{"role": "user", "content": question}, {"role": "system", "content": context}])
  return completion.choices[0].message.content


async def app():
  st.title("OpenAI Text Generation App")

  # Define your default text
  dbschema = """CREATE TABLE products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    stock_quantity INT NOT NULL
    );

    CREATE TABLE customers (
        customer_id INT AUTO_INCREMENT PRIMARY KEY,
        first_name VARCHAR(100) NOT NULL,
        last_name VARCHAR(100) NOT NULL,
        email VARCHAR(255) NOT NULL,
        phone VARCHAR(20),
        address VARCHAR(255)
    );

  CREATE TABLE orders (
      order_id INT AUTO_INCREMENT PRIMARY KEY,
      customer_id INT NOT NULL,
      order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
  );

  CREATE TABLE order_details (
      order_detail_id INT AUTO_INCREMENT PRIMARY KEY,
      order_id INT NOT NULL,
      product_id INT NOT NULL,
      quantity INT NOT NULL,
      price_per_unit DECIMAL(10, 2) NOT NULL,
      total_price DECIMAL(10, 2) NOT NULL,
      FOREIGN KEY (order_id) REFERENCES orders(order_id),
      FOREIGN KEY (product_id) REFERENCES products(product_id)
  );"""

  # Create the text area with the default value
  user_schema = st.text_area("Enter the database schema:", dbschema)

  options = ['What is the total revenue generated in the last quarter (by order date)?', 
    'What is the average order value (total price) for the last month (by order date)?', 
    'Which product has the highest total quantity sold overall?', 
    'Who is the customer with the most orders placed?',
    'What city/area (derived from address field in customers table) has the most customers?'
    'What is the best-selling product in each month for the last 3 months?',
    'Which products have a stock quantity below a certain threshold (e.g., 10)?',
    'What is the total revenue generated from each customer in the last year (by order date)?',
    'What is the most frequent combination of product purchased together (based on order_details)?',
    'Compare total revenue generated by new vs. returning customers (based on first order date)']
  
  # Create the combobox (selectbox) with a descriptive label
  selected_option = st.selectbox(
      label="Choose an option:",
      options=options,
      index=0  # Optionally set a default selected index
  )

  question = selected_option
  
  # Text area input for the context
  context = """Follow the instructions exactly. Using the following database schema,give me MYSQL
  SQL statement that will statisfy the question. The SQL must use only the data defined in the schema. 
  Return only the SQL statement without any explanation or other outputs: """ + user_schema

  
  # Button to generate response
  if st.button("Generate SQL"):
      if question and context:
          response = await generate_response(question, context)
          st.write("Response:")
          st.write(response)
      else:
          st.error("Please enter both question and context.")

#run the app
if __name__ == "__main__":
  import asyncio
  asyncio.run(app())
